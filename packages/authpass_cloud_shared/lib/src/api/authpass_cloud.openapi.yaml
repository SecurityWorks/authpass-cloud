openapi: 3.0.0
info:
  title: AuthPass
  description: Never mind.
  version: 1.0.0
  x-dart-name: AuthPassCloud
  contact:
    url: 'https://authpass.app/'
    email: herbert@authpass.app
    name: Herbert Poul
servers:
  - url: https
paths:
  /check:
    get:
      summary: Health check.
      security: []
      responses:
        '200':
          description: Everything OK
      description: Health check of endpoint data
  /user/register:
    post:
      summary: 'Create new user, or login the user using confirmation email.'
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
  /email/status:
    get:
      summary: Get the status of the current auth token (whether it was confirmed or not).
      responses:
        '200':
          description: Whether it was confirmed or not.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    enum:
                      - created
                      - confirmed
  /email/confirm:
    get:
      summary: Confirm email address
      security: []
      parameters:
        - name: token
          in: query
          required: true
          description: Unique token which was sent to email address.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
        '400':
          description: Invalid token or email address.
    post:
      summary: Confirm with recaptcha
      security: []
      requestBody:
        required: true
        description: ''
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                g-recaptcha-response:
                  type: string
              required:
                - token
                - g-recaptcha-response
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
        '400':
          description: Invalid token or email address.
  /status:
    get:
      summary: Get status of the user account.
      responses:
        '200':
          description: Information of the logged in account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mail:
                    type: object
                    properties:
                      messagesUnread:
                        type: integer
                    required:
                      - messagesUnread
                required:
                  - mail
  /mailbox:
    get:
      summary: List of all mailboxes of the current user.
      responses:
        '200':
          description: On Success returns unpaginated list (right now) of all mailboxes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mailbox'
  /mailbox/create:
    post:
      summary: Creates a new (random) email address mailbox.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                  description: 'label for this mailbox, can be an empty string.'
                entryUuid:
                  type: string
                  description: 'Client provided entry uuid to match with password entry, can be an empty string.'
              required:
                - label
                - entryUuid
      responses:
        '200':
          description: Successfully created mailbox.
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: The address of the new mailbox.
  /mailbox/list:
    get:
      summary: List all emails in all mailboxes of the current user.
      responses:
        '200':
          description: Successful list
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    $ref: '#/components/schemas/Page'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailMessage'
                required:
                  - page
                  - data
      parameters:
        - schema:
            type: string
          in: query
          name: page_token
          description: Page token as returned by Page
        - schema:
            type: string
          in: query
          name: since_token
          description: As returned from a previous page object for a finished sync.
      description: ''
  /mail/massupdate:
    post:
      description: Apply the given update to all matching mails.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                filter:
                  type: string
                  enum:
                    - messageIds
                    - all
                messageIds:
                  description: 'Only used if filter=messageIds'
                  type: array
                  items:
                    type: string
                isRead:
                  type: boolean
              required:
                - filter
      responses:
        '200':
          description: Update finished.
  /mailbox/update/{mailboxAddress}:
    parameters:
      - name: mailboxAddress
        in: path
        schema:
          type: string
        required: true
    put:
      operationId: MailboxUpdate
      summary: 'Update information about mailbox'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  type: string
                entryUuid:
                  type: string
                isDeleted:
                  type: boolean
                isDisabled:
                  type: boolean
                isHidden:
                  type: boolean
      responses:
        '200':
          description: 'Success.'
  /mailbox/message/{messageId}:
    parameters:
      - name: messageId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: MailboxMessageGet
      summary: 'Fetch raw email message.'
      responses:
        '200':
          description: Raw email message incluuding all headers, body and attachment.
          content:
            'text/plain':
              schema:
                type: string
    delete:
      operationId: MailboxMessageDelete
      summary: 'Delete the given message.'
      responses:
        '200':
          description: Message was deleted successfully.
  /mailbox/message/{messageId}/read:
    parameters:
      - name: messageId
        in: path
        required: true
        schema:
          type: string
    put:
      operationId: MailboxMessageMarkRead
      summary: 'Mark message as read'
      responses:
        '200':
          description: 'Successfully marked as read.'
    delete:
      operationId: MailboxMessageMarkUnRead
      summary: 'Mark message as unread (again)'
      responses:
        '200':
          description: 'Successfully marked as unread.'
  /email/receive:
    post:
      summary: Receive emails throw smtp bridge.
      parameters:
        - name: x-authpass-token
          in: header
          style: simple
          schema:
            type: string
          required: true
          description: Security token to validate origin from trusted server
      security: []
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Email content (header and body)
      responses:
        '200':
          description: Received and delivered successfully.
        '403':
          description: Delivery not accepted.
          content:
            text/plain:
              schema:
                type: string
                description: 'Email error codes similar to https://tools.ietf.org/html/rfc3463 expected.'
components:
  schemas:
    RegisterRequest:
      properties:
        email:
          type: string
          description: Email address for the current user.
      required:
        - email
    RegisterResponse:
      properties:
        userUuid:
          type: string
          description: Uuid of the newly registered user.
        authToken:
          type: string
          description: 'Auth token which can be used for authentication, once email is confirmed.'
        status:
          type: string
          description: Status of the user and auth token (created or confirmed).
          enum:
            - created
            - confirmed
      required:
        - userUuid
        - authToken
        - status
    Page:
      title: Page
      type: object
      properties:
        nextPageToken:
          description: Token for the next page, might be null if there are no more pages.
          type: string
        sinceToken:
          description: Once everything is synced, this token can be used for subsequent syncs.
          type: string
    EmailMessage:
      title: EmailMessage
      type: object
      properties:
        id:
          type: string
          format: uuid
        subject:
          type: string
        sender:
          type: string
        mailboxEntryUuid:
          type: string
        createdAt:
          type: string
          format: date-time
        size:
          type: integer
          description: 'Body size in bytes.'
        isRead:
          type: boolean
          description: true if this mail was marked as read.
      required:
        - id
        - subject
        - sender
        - mailboxEntryUuid
        - createdAt
        - size
        - isRead
    Mailbox:
      type: object
      properties:
        address:
          type: string
          description: Unique email address (a@example.com)
        label:
          type: string
          description: Label as given during create. (Can be empty string)
        entryUuid:
          type: string
          description: Entry uuid given during create. (Can be empty string)
        createdAt:
          type: string
          format: date-time
        isDisabled:
          type: boolean
      required:
        - address
        - label
        - entryUuid
        - createdAt
        - isDisabled
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - apiKey: []
